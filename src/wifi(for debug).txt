//초음파 센서 모터 제어 코드
#include <Arduino.h>
#include "ESP32Servo.h"
#include <Wifi.h>

const char* ssid = "AtoZ_LAB";
const char* password = "atoz9897!";

const uint16_t telnetPort = 23; // Telnet 기본 포트
WiFiServer telnetServer(telnetPort);
WiFiClient telnetClient; // 현재 연결된 클라이언트를 저장할 변수

// 로그 메시지를 시리얼과 Telnet으로 동시에 보내는 함수
void printLog(const String &message) {
  Serial.print(message);
  if (telnetClient && telnetClient.connected()) {
    telnetClient.print(message);
  }
}

void printlnLog(const String &message) {
  Serial.println(message);
  if (telnetClient && telnetClient.connected()) {
    telnetClient.println(message); // Telnet 클라이언트에 따라 \r\n이 자동으로 처리됨
  }
}

// 숫자 등 다른 타입도 보내고 싶다면 String으로 변환해서 사용
void printlnLog(float value) {
  printlnLog(String(value));
}

void printlnLog(int value) {
  printlnLog(String(value));
}

#define SERVO_PIN 39
// AtoZ_LAB  / atoz9897!
Servo myservo;

float backdistance; // 후방 거리

#define trigPin 42
#define echoPin 41
//#define backTrigPin 6
//#define backEchoPin 7

#define TURN_TIME 4000 // 실제 회전시간에 맞게 조절

//int ena = 3;
int in1 = 15;  //IN1
int in2 = 16; //IN2

int in3 = 17; //IN3
int in4 = 18; //IN4
//int enb = 18;

float measureDistance(int trig, int echo){
  // 초음파센서 거리 측정 함수
  float duration, distance;
  digitalWrite(trig, LOW);
  delayMicroseconds(2);
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW);
  duration = pulseIn(echo, HIGH, 30000);
  distance = ((float)(340*duration) / 10000) / 2; // 거리 = (음속 340 m/s * 시간(us)) / 2 / 10000 → cm로 변환
  delay(10);
  return distance;

  // // 5번 실행하여 평균 구하는 함수 // 안정성 ↑ 반응속도 ↓
  // float total = 0;
  // int count = 3;
  // for (int i = 0; i < count; i++) {
  //   digitalWrite(trig, LOW);
  //   delayMicroseconds(2);
  //   digitalWrite(trig, HIGH);
  //   delayMicroseconds(10);
  //   digitalWrite(trig, LOW);
  //   float duration = pulseIn(echo, HIGH, 30000);
  //   total += duration * 0.0343 / 2.0;
  //   delay(10);  // 너무 빠른 반복 방지
  // }
  // return total / count;
}
float getDistance(){
  return measureDistance(trigPin, echoPin);
}

// float getBackDistance(){
//   return measureDistance(backTrigPin, backEchoPin);
// }
// put function declarations here:
void moveForward(){
  //analogWrite(ena, 255);
  //analogWrite(enb,  255);
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  Serial.println("Go Forward");
  printlnLog("Go Forward");
}

void moveBackward(){
  //analogWrite(ena, 255);
  //analogWrite(enb,  255);
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  Serial.println("Go Back");
  printlnLog("Go Back");
  delay(4000);
}

void stop(){
  //analogWrite(ena, 0);
  //analogWrite(enb,  0);
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  Serial.println("Stop");
  printlnLog("Stop");
  delay(500);
}

void turnLeft(){
  //analogWrite(ena, 255);
  //analogWrite(enb,  255);
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  Serial.println("Turn Left");
  printlnLog("Turn Left");
  delay(TURN_TIME); // 실제 회전시간에 맞춰 조절
  //좌회전
}

void turnRight(){
  //analogWrite(ena, 255);
  //analogWrite(enb,  255);
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  Serial.println("Turn Right");
  printlnLog("Turn Right");
  delay(TURN_TIME); // 실제 회전시간에 맞춰 조절
  //우회전
}

void setup() {
  // put your setup code here, to run once:
  myservo.attach(SERVO_PIN);
  Serial.begin(115200);
  Serial.begin(115200);
  delay(1000);

  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP()); // 이 IP 주소를 Telnet 접속 시 사용합니다.

  // Telnet 서버 시작
  telnetServer.begin();
  telnetServer.setNoDelay(true); // 데이터 즉시 전송 설정
  Serial.print("Telnet server started on port ");
  Serial.println(telnetPort);
  Serial.println("You can connect using a Telnet client (e.g., PuTTY).");
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  //pinMode(backTrigPin, OUTPUT);
  //pinMode(backEchoPin, INPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  //pinMode(ena, OUTPUT);
  //pinMode(enb, OUTPUT);

  myservo.write(90);
  delay(500);
}

void loop() {

      // 새로운 Telnet 클라이언트 연결 처리
  if (telnetServer.hasClient()) {
    // 이미 연결된 클라이언트가 있다면, 새 연결을 위해 기존 연결을 끊습니다.
    // (이 예제는 한 번에 하나의 클라이언트만 지원)
    if (telnetClient && telnetClient.connected()) {
      telnetClient.stop();
      Serial.println("Previous Telnet client disconnected.");
    }
    
    telnetClient = telnetServer.available(); // 새 클라이언트 받기
    
    if (telnetClient) {
      Serial.print("New Telnet client connected: ");
      Serial.println(telnetClient.remoteIP());
      telnetClient.println("Welcome to ESP32 Remote Monitor!");
      telnetClient.flush(); // 환영 메시지 즉시 전송
    }
  }

  // put your main code here, to run repeatedly:
  float frontDistance = getDistance();// 전방 거리 측정
  delay(100);
  Serial.print("Distance : ");
  Serial.println(frontDistance);
  printLog("Distance : ");
  printlnLog(frontDistance);

  if (frontDistance > 20){
    moveForward();
  }
  else {
    stop();
    Serial.println("detected obstacle");
    printlnLog("detected obstacle");
    myservo.write(15); // 초음파센서 좌측으로 회전
    delay(800); // 대략적인 서보모터 회전 시간
    float leftDistance = getDistance(); //leftDistance에 값 저장
    Serial.print("Left Distance : ");
    printLog("Left Distance : ");
    Serial.println(leftDistance);
    printlnLog(leftDistance);
    myservo.write(165); // 초음파센서 우측으로 회전
    delay(1000); // 대략적인 서보모터 회전 시간
    float rightDistance = getDistance(); //rightDistance에 값 저장
    Serial.print("Right Distance : ");
    printLog("Right Distance : ");
    Serial.println(rightDistance);
    printlnLog(rightDistance);
    myservo.write(90); // 초음파 센서 원위치
    delay(500);

    if(leftDistance > rightDistance && leftDistance > 20){
      turnLeft();//왼쪽으로 방향 전환
    }
    else if(rightDistance > leftDistance && rightDistance > 20){
      turnRight();//오른쪽으로 방향 전환
    }
    else{
      // moveBackward();
      // backdistance = getBackDistance();
      // Serial.print("Back Distance : ");
      // Serial.println(backdistance);
      // if(backdistance < 15 && backdistance > 0){
      //   stop();
      //   // 정지 후 다시 전진하도록 하는게 아닌 새롭게 길찾는 알고리즘을 하나 만들어야 함.
      //   // 제자리 회전을 해서 새로 길을 찾거나 하는 코드.
      //   // Escape code
      // }
      stop();
      moveBackward();
      turnLeft();
      turnLeft(); // 좌측 회전 2번을 통해 반바퀴 회전
    }
  }

  delay(100);
  static unsigned long lastMsgTime = 0;
  if (millis() - lastMsgTime > 1000) {
    lastMsgTime = millis();
    
    // 기존 코드의 Serial.print/println 대신 printLog/printlnLog 사용
    printLog("Uptime: ");
    printlnLog(String(millis() / 1000) + " seconds");

    
  }
  // --- --- --- --- --- --- --- --- --- --- --- --- --- ---

  delay(10); // 다른 작업에 영향이 없도록 짧은 딜레이
}

