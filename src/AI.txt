// 초음파 센서를 통한 장애물 회피 로봇 및 Telnet 로깅 코드

// 2025 05 19 전방 다 막혔을때 로직 수정 (후진 뒤 180도 회전) -> (후진 뒤 좌우 탐색)
// 2025 05 20 회전 각도 줄이고 이상한 값 나올 시 다른 차량 몸체 회전하기
// 2025 05 21 급격한 거리 변화 감지 로직 추가 시도

// 해야할 것 이상한 값 해결하는 로직 -> 오차 발생시

#include <Arduino.h>
#include "ESP32Servo.h"
#include <algorithm> // std::sort 사용을 위해 필요
#include <cmath>     // fabs 사용을 위해 필요

#define SERVO_PIN 39
Servo myservo;

// float backdistance; // 후방 거리 - 현재 코드에서는 직접 사용되지 않음

#define trigPin 42
#define echoPin 41
//#define backTrigPin 6
//#define backEchoPin 7

#define TURN_TIME 4000         // 일반 장애물 회피 시 회전 시간
#define SUDDEN_CHANGE_TURN_TIME 2000 // 급격한 거리 변화 시 회전 시간
#define SAFE_DISTANCE 20       // 안전 거리 (cm)
#define MAX_DISTANCE 399       // 센서 최대 인식 거리 (cm)
#define MIN_DISTANCE 3         // 센서 최소 인식 거리 (cm)
#define DISTANCE_CHANGE_THRESHOLD 10.0 // 급격한 거리 변화 감지 임계값 (cm)

// 모터 드라이버 핀
int ena = 13;
int in1 = 15;  //IN1
int in2 = 16; //IN2
int in3 = 17; //IN3
int in4 = 18; //IN4
int enb = 12;

// 이전 전방 거리 값을 저장하기 위한 전역 변수
// -1.0은 아직 유효한 이전 측정값이 없음을 의미 (첫 번째 측정 또는 방향 전환 후)
float g_previousFrontDistance = -1.0;

// 초음파센서 거리 측정 함수
float measureDistance(int trig, int echo) {
    float duration, distance;
    digitalWrite(trig, LOW);
    delayMicroseconds(2);
    digitalWrite(trig, HIGH);
    delayMicroseconds(10);
    digitalWrite(trig, LOW);
    duration = pulseIn(echo, HIGH, 30000); // 타임아웃 30ms
    if (duration == 0) {
        return 0.0; // 타임아웃 시 0 반환 (MIN_DISTANCE 보다 작을 가능성이 높음)
    } else {
        distance = ((float)(340 * duration) / 10000) / 2; // 거리 cm로 변환
        return distance;
    }
}

// 필터링된 거리 측정 함수 (중간값 사용)
float getFilterDistance() {
    float sample[5];
    int validSampleCount = 0;
    for (int i = 0; i < 5; i++) {
        float currentDistance = measureDistance(trigPin, echoPin);
        if (currentDistance >= MIN_DISTANCE && currentDistance <= MAX_DISTANCE) {
            sample[validSampleCount++] = currentDistance;
        }
        delay(20); // 샘플 간 짧은 지연
    }

    if (validSampleCount == 0) {
        // 유효한 샘플이 없는 경우 (예: 너무 가깝거나, 너무 멀거나, 센서 오류)
        // MAX_DISTANCE + 1.0f 값은 "측정 범위 밖" 또는 "오류"를 나타냄
        return MAX_DISTANCE + 1.0f;
    }

    std::sort(sample, sample + validSampleCount); // 유효한 샘플 정렬
    // 중앙값 반환 (샘플 수가 짝수일 경우, 구현에 따라 중간 두 값 중 하나 또는 평균)
    // 여기서는 단순하게 중앙 인덱스의 값을 사용
    return sample[validSampleCount / 2];
}

// 최종 거리 값을 얻는 함수
float getDistance() {
    return getFilterDistance();
}

// --- 이동 제어 함수 ---
void moveForward() {
    analogWrite(ena, 200);
    analogWrite(enb, 200);
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
    Serial.println("전진");
}

void moveBackward() {
    analogWrite(ena, 200);
    analogWrite(enb, 200);
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
    Serial.println("후진");
    delay(3000); // 후진 시 지정된 시간만큼 지연
}

void stop() {
    analogWrite(ena, 0);
    analogWrite(enb, 0);
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
    Serial.println("정지");
    delay(500); // 정지 후 짧은 지연
}

void turnLeft(int time) {
    analogWrite(ena, 200);
    analogWrite(enb, 200);
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
    Serial.println("좌회전");
    delay(time);
}

void turnRight(int time) {
    analogWrite(ena, 200);
    analogWrite(enb, 200);
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
    Serial.println("우회전");
    delay(time);
}

// --- 초기 설정 함수 ---
void setup() {
    myservo.attach(SERVO_PIN);
    Serial.begin(115200);
    delay(1000); // 시리얼 통신 안정화 대기

    pinMode(trigPin, OUTPUT);
    pinMode(echoPin, INPUT);
    pinMode(in1, OUTPUT);
    pinMode(in2, OUTPUT);
    pinMode(in3, OUTPUT);
    pinMode(in4, OUTPUT);

    myservo.write(90); // 서보 모터 중앙 정렬
    delay(500);
    Serial.println("=== 로봇 초기 설정 완료 ===");
}

// --- 메인 루프 함수 ---
void loop() {
    float frontDistance = getDistance(); // 현재 전방 거리 측정
    delay(50); // 측정 후 짧은 지연

    // 현재 거리 및 이전 거리(유효한 경우) 로그 출력
    Serial.print("전방 거리: "); Serial.print(frontDistance);
    if (g_previousFrontDistance != -1.0) {
        Serial.print(" (이전: "); Serial.print(g_previousFrontDistance); Serial.print(")");
    }
    Serial.println(" cm");

    bool currentReadingIsValid = (frontDistance >= MIN_DISTANCE && frontDistance <= MAX_DISTANCE);
    float prevDistForThisCycle = g_previousFrontDistance; // 이번 사이클 비교에 사용할 이전 거리 값 저장

    // 다음 사이클에서 사용될 g_previousFrontDistance 값 업데이트 준비
    if (currentReadingIsValid) {
        g_previousFrontDistance = frontDistance;
    } else {
        g_previousFrontDistance = -1.0; // 유효하지 않은 측정값이면, 다음 사이클은 비교 없이 새로 시작
        Serial.println("경고: 전방 센서 측정값 유효 범위 벗어남!");
    }

    bool actionTakenThisCycle = false; // 이번 사이클에서 주요 행동(회피, 급변 대응)을 했는지 여부

    if (currentReadingIsValid && prevDistForThisCycle != -1.0) {
        if (fabs(frontDistance - prevDistForThisCycle) > DISTANCE_CHANGE_THRESHOLD) {
            Serial.println("급격한 거리 변화 감지");
            stop();
            actionTakenThisCycle = true;

            // 주변 탐색 (45도 좌측, 135도 우측)
            myservo.write(45);
            delay(500);
            float s_leftDist = getDistance();
            Serial.print("좌");
            Serial.println(s_leftDist);
            myservo.write(135);
            delay(600);
            float s_rightDist = getDistance();
            Serial.print("우");
            Serial.println(s_rightDist);
            myservo.write(90);
            delay(500); // 서보 중앙으로 복귀

            bool s_leftSafe = (s_leftDist > SAFE_DISTANCE && s_leftDist <= MAX_DISTANCE);
            bool s_rightSafe = (s_rightDist > SAFE_DISTANCE && s_rightDist <= MAX_DISTANCE);

            if (s_leftSafe && (!s_rightSafe || s_leftDist >= s_rightDist)) {
                turnLeft(SUDDEN_CHANGE_TURN_TIME);
                g_previousFrontDistance = -1.0; // 방향 전환 후 이전 거리 리셋
            } else if (s_rightSafe && (!s_leftSafe || s_rightDist > s_leftDist)) {
                turnRight(SUDDEN_CHANGE_TURN_TIME);
                g_previousFrontDistance = -1.0; // 방향 전환 후 이전 거리 리셋
            } else {
                Serial.println("경로 없음");
                // 추가 행동 없이 정지 상태로 다음 루프에서 재평가
            }
        }
    }

    // 일반 주행 및 장애물 회피 로직
    if (!actionTakenThisCycle) { // 급격한 거리 변화로 인한 행동이 없었을 경우에만 실행
        if (currentReadingIsValid && frontDistance > SAFE_DISTANCE) {
            moveForward();
        } else { // 장애물 발견 또는 유효하지 않은 센서 값 처리
            if (!currentReadingIsValid) {
                Serial.println("센서 값 오류로 판단, 장애물 회피 로직 실행.");
            }
            stop(); // 장애물 회피 전 확실히 정지
            Serial.println("장애물 감지 또는 경로 불분명. 회피 시작.");

            // 기존 장애물 회피 로직 (좌/우 넓게 탐색)
            bool pathFound = false;
            while (!pathFound) { // 안전한 경로를 찾을 때까지 반복 (단, 과도한 반복 방지책 고려 가능)
                Serial.println("경로 탐색");
                myservo.write(15); 
                delay(800); float obs_leftDist = getDistance();
                Serial.print("좌측 탐색 : "); 
                Serial.println(obs_leftDist);
                myservo.write(165); 
                delay(1000); 
                float obs_rightDist = getDistance();
                Serial.print("우측 탐색 : "); 
                Serial.println(obs_rightDist);
                myservo.write(90);
                delay(500); // 서보 중앙 복귀

                bool obs_leftSafe = (obs_leftDist > SAFE_DISTANCE && obs_leftDist <= MAX_DISTANCE);
                bool obs_rightSafe = (obs_rightDist > SAFE_DISTANCE && obs_rightDist <= MAX_DISTANCE);

                if (obs_leftSafe && (!obs_rightSafe || obs_leftDist >= obs_rightDist)) {
                    turnLeft(TURN_TIME);
                    g_previousFrontDistance = -1.0; // 방향 전환 후 이전 거리 리셋
                    pathFound = true;
                } else if (obs_rightSafe && (!obs_leftSafe || obs_rightDist > obs_leftDist)) {
                    turnRight(TURN_TIME);
                    g_previousFrontDistance = -1.0; // 방향 전환 후 이전 거리 리셋
                    pathFound = true;
                } else {
                    Serial.println("후진 후 재탐색.");
                    moveBackward(); // 후진 (내부 지연 포함)
                    stop();         // 후진 후 정지
                    g_previousFrontDistance = -1.0; // 위치 변경 후 이전 거리 리셋
                    // pathFound는 여전히 false이므로 while 루프 계속
                }
            } // while(!pathFound) 끝
        }
    } else {
        Serial.println("이번 사이클은 급격한 거리 변화 대응으로 마무리.");
    }

    delay(100); // 메인 루프의 기본 지연
}